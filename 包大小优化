
影响包大小的主要有一下几个：
1、图片
2、资源文件
3、代码，实际就是编译之后的可执行文件

图片：
图片资源的检查和监控：
1、静态脚本扫描无用的图片
2、打包时通过脚本检查单张图片的大小不能超过阈值（根据自己APP设定阈值）
对于图片资源的优化
1、图片网络化
2、纯色的图片使用 iconfont
3、图片质量压缩

资源文件：
1、公共字体库下沉到底层组件，防止多个业务组件引入多份字体库
2、配置信息的增量更新，减少预置文件

可执行文件：
1、无用类的检查
2、Mach-o文件的合并
3、无用函数、无用变量的删除

关于无用类的检查：
只要是通过RealizeClass中的flag来检查，每个类在第一次被调用的时候，会被懒加载，这是 flag会被标识为初始化状态，通过在合适的时机检查flag就能得出哪些类被调用了
再结合之前的统计数据就可以统计出来业务方的哪些类没被调用
#import <objc/objc.h>
#import <stdint.h>

#import <dlfcn.h>
#import <mach-o/getsect.h>
void reportClassFunction(){
    Dl_info info;
    dladdr((const void*)&reportClassFunction, &info);
    const uint64_t mach_header = (uint64_t)info.dli_fbase;
    const struct section_64 *section = getsectbynamefromheader_64((const struct mach_header_64*)mach_header, "__DATA", "__objc_classlist");
    for(uint64_t address = section->offset; address < section->offset + section->size; address+= sizeof(const char**)){
        Class cls = (__bridge  Class)(*(void**)(mach_header + address));
        NSLog(@"sssss");
    }
    
}

Mach-o文件的合并：
参考https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247488473&idx=1&sn=c4db1f3256ffcf3e372cebb4f97b89b4&source=41#wechat_redirect 这篇文章

无用函数、无用变量的删除：
